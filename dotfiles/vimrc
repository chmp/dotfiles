" -------------------------------------
" --            vundle               --
" -------------------------------------

set nocompatible
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'VundleVim/Vundle.vim'
Plugin 'Valloric/YouCompleteMe'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'easymotion/vim-easymotion'
Plugin 'junegunn/seoul256.vim'
Plugin 'airblade/vim-gitgutter'
Plugin 'ekalinin/Dockerfile.vim'
Plugin 'junegunn/goyo.vim'
Plugin 'chmp/mdnav'
Plugin 'tpope/vim-eunuch'
Plugin 'jaxbot/semantic-highlight.vim'
Plugin 'ConradIrwin/vim-bracketed-paste'
Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'
Plugin 'severin-lemaignan/vim-minimap'

call vundle#end()
filetype plugin indent on

" -------------------------------------
" --            vundle               --
" -------------------------------------

" conceal
set conceallevel=2

" configure tab completion behavior
set wildmode=longest,list,full
set wildmenu

" always show the current file name
set laststatus=2
set title

" configure the tabbing behavior
set expandtab
set tabstop=4
set shiftwidth=4

" configure edit behavior
set number
set autoindent
" set wrapmargin=80
" set

" use make per default
set makeprg=make

" configure buffers
set hidden

" make cursor keys wrapping
set whichwrap+=<,>,h,l,[,]

" fix backspace behavior
set backspace=indent,eol,start

" disable linewrapping
set nowrap

"activate American spell checking per default
set spell
set spl=en_us

" add keyboard shortcut to jump to next spelling mistake
nmap <c-f> ]s

" activate and configure syntax highlights
syntax on
colorscheme seoul256
set background=light

" show character at columns 81 characters
" use for all characters over 80 match OverLength /\%81v.\+/
highlight OverLength ctermbg=red ctermfg=white guibg=#D9D9D9
match OverLength /\%81v./

" fix trailing spaces
highlight ExtraWhitespace ctermbg=LightYellow guibg=LightYellow
match ExtraWhitespace /\s\+$/

" based on http://stackoverflow.com/a/3475364
func! ImplDeleteTrailingWhiteSpace()
    exe "normal mz"
    %s/\s\+$//ge
    exe "normal `z"
endfunc

command! DeleteTrailingWhiteSpace :call ImplDeleteTrailingWhiteSpace()

au BufWrite *.py :call ImplDeleteTrailingWhiteSpace()

" configure markdown plugin
let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_math = 1

" fix wrapping of lists
" (https://github.com/plasticboy/vim-markdown/issues/232)
autocmd FileType markdown
    \ set formatoptions-=q |
    \ set formatlistpat=^\\s*\\d\\+\\.\\s\\+\\\|^\\s*\[-*+]\\s\\+

au BufWrite *.md :call ImplDeleteTrailingWhiteSpace()

" add command to remove all 'Mac'-spaces
command! DeleteMacSpace %s#\%u00a0##

" enable markdown syntax highlighting for *.md files
au BufRead,BufNewFile *.md set filetype=markdown

"" merely underline spell check errors
hi clear SpellBad
hi SpellBad cterm=underline

" configure easymotion
map  <Leader>w <Plug>(easymotion-bd-w)
nmap <Leader>w <Plug>(easymotion-overwin-w)

" config vim-jedi
" make sure the preview window is closed after completion
autocmd CompleteDone * pclose

" config YCM
let g:ycm_python_binary_path = 'python'

" show call signatures in status line
let g:jedi#show_call_signatures = "2"

" CtrlP
map <C-N> :CtrlPMRUFiles<CR>

" show only files not ignored by .gitignore
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']

" configure mdnav
let g:mdnav#Extensions = '.md'
command! NN e `readlink ~/.notes`/Index.md
command! NT exec 'e ' . substitute(system('readlink ~/.notes'), '\n\+$', '', '') . '/' . strftime('%Y/%Y%m/%Y%m%d.md')

" copied from https://stackoverflow.com/a/4293538
function WriteCreatingDirs()
    echo '!mkdir -p ' . expand('%:p:h')
    write
endfunction
command W call WriteCreatingDirs()

" add command to call tig at nearest git repo
func! ExecuteTig()
    let l:git_dir = finddir('.git', expand('%:p:h') . ';')

    if l:git_dir == ''
        echo 'could not find gitfolder'
        return
    endif

    let l:project_dir = fnamemodify(l:git_dir, ':h')
    exec '!cd' shellescape(l:project_dir) '&& tig'
endfunc

command! Tig :call ExecuteTig()

